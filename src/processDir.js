import fs from 'fs';
import readline from 'readline';
import path from 'path';

// All block characters 
const fullBlock = '\u2588';         // Output: █
const halfBlockUpper = '\u2580';    // Output: ▀
const halfBlockLower = '\u2584';    // Output: ▄
const lightShade = '\u2591';        // Output: ░
const mediumShade = '\u2592';       // Output: ▒
const darkShade = '\u2593';         // Output: ▓

// Get command line arguments
const [filename, id, name, omitStart, omitEnd] = process.argv.slice(2);

// Validate arguments
if (!filename || isNaN(id) || !name || isNaN(omitStart) || isNaN(omitEnd)) {
    console.log(`
Usage: node src/processDir.js <filename> <id> <name> <omitStart> <omitEnd>
filename: the input file
id: unique id 
name: name of the directory/disk
omitStart: number of segments to be omitted from start 
omitEnd: number of segments to be omitted from end

Note: input file is generated by the following commands:

dir /S /B | findstr /V /R /C:"\\\\\\." | findstr /V /R /C:"\\\\node_modules" | findstr /V /R /C:"\\.tmp" > output.dir.txt

or 

dir F:\Animation /S /B | findstr /V /R /C:"\\\\\\." | findstr /V /R /C:"\\\\node_modules" | findstr /V /R /C:"\\.tmp" >> output.dir.txt

`);
    process.exit(1);
}

// Define the input file path
const inputFilePath = path.join(process.cwd(), filename);

// Create a ReadStream
const fileStream = fs.createReadStream(inputFilePath);

// Create a readline interface
const rl = readline.createInterface({
    input: fileStream,
    crlfDelay: Infinity
});

// Function to print header 
const printHeader = (id, name) => {
    console.log(`HMSET DIRINDEX:DIR:${id} name "${name}" model "What brand" capacity "What size" status "archive/active" description "What purpose"`)
    console.log()
}

// Function to print segments of the path after omitting specified segments
const printPathSegments = (line, id, name, omitStart, omitEnd) => {
    const parts = line.split(path.sep);

    // Calculate the segments to keep
    const startIdx = parseInt(omitStart, 10);
    const endIdx = parts.length - parseInt(omitEnd, 10);

    // Ensure indices are within valid range
    const selectedParts = parts.slice(startIdx, endIdx);

    // Print each segment
    selectedParts.forEach((part, index) => {
        // Replace '\\' with '\\\\' 
        console.log(`ZADD "DIRINDEX:INDEX:${part.toUpperCase()}" ${id} "\\\\\\\\${name}${line.substring(2).replace(/\\/g, '\\\\')}"`)
    });
};

// Print the header 
printHeader(id, name)

// Read the file line by line
rl.on('line', (line) => {
    // Start processing... replace '?' with a block character. 
    printPathSegments(line.replace(/\?/g, mediumShade), id, name, omitStart, omitEnd);
    console.log()
});

// Handle the end of the file
rl.on('close', () => {
    // Finished processing the file.
});

/* 
   Command to generate directory list 
   ----------------------------------
   dir /S /B | findstr /V /R /C:"\\\." | findstr /V /R /C:"\\node_modules" | findstr /V /R /C:"\.tmp" > output.dir.txt

   or 

   dir F:\Animation /S /B | findstr /V /R /C:"\\\." | findstr /V /R /C:"\\node_modules" | findstr /V /R /C:"\.tmp" >> output.dir.txt


   Command to generate Redis command
   ---------------------------------
   node src/processDir.js data/DATA200G.dir.txt 82 DATA200G 2 0 > data/DATA200G.redis
   node src/processDir.js data/DATA320G.dir.txt 83 DATA320G 4 0 > data/DATA320G.redis

   node src/processDir.js data/DATA160.dir.txt 91 DATA160 2 0 > data/DATA160.redis 
   node src/processDir.js data/DATA250.dir.txt 92 DATA250 2 0 > data/DATA250.redis       
   node src/processDir.js data/DATA500.dir.txt 95 DATA500 2 0 > data/DATA500.redis 

   node src/processDir.js data/TV-500G.dir.txt 100 TV-500G 2 0 > data/TV-500G.redis
   node src/processDir.js data/TV-1T.dir.txt 101 TV-1T 2 0 > data/TV-1T.redis
   node src/processDir.js data/TV-2T.dir.txt 102 TV-2T 2 0 > data/TV-2T.redis
   node src/processDir.js data/TV-5T.dir.txt 105 TV-5T 2 0 > data/TV-5T.redis

   node src/processDir.js data/BACKUP1T-B.dir.txt 1 BACKUP1T-B 2 0 > data/BACKUP1T-B.redis
   node src/processDir.js data/DATA1T-S.dir.txt 2 DATA1T-S 2 0 > data/DATA1T-S.redis
   node src/processDir.js data/DATA2T-W.dir.txt 3 DATA2T-W 2 0 > data/DATA2T-W.redis

   node src/processDir.js data/DATA5T-W.dir.txt 4 DATA5T-W 2 0 > data/DATA5T-W.redis
   node src/processDir.js data/DATA4T-W.dir.txt 5 DATA4T-W 2 0 > data/DATA4T-W.redis
   node src/processDir.js data/DATA5T-W(2).dir.txt 6 DATA5T-W(2) 2 0 > data/DATA5T-W(2).redis

   node src/processDir.js data/BACKUP-5T(2024).dir.txt 7 BACKUP-5T(2024) 2 0 > data/BACKUP-5T(2024).redis
*/